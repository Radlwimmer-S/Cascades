struct LightComponents
{
	float Ambient;
	float Diffuse;
	float Specular;
};

struct LightSource
{
	vec3 Pos;
	vec3 Color;

	int Type;
	bool IsEnabled;
	bool CastShadow;

	mat4 lightSpaceMatrix;

	float near_plane;
	float far_plane;

	samplerCube depthCube;
	sampler2D depthMap;
};

struct LightingGlobals
{
	vec3 ViewPos;
	vec3 FragPos;
	vec3 FragNormal;
	int ShadowType;
	bool EnableLighting;
};

// array of offset direction for sampling
vec3 gridSamplingDisk[20] = vec3[]
(
	vec3(1, 1, 1), vec3(1, -1, 1), vec3(-1, -1, 1), vec3(-1, 1, 1),
	vec3(1, 1, -1), vec3(1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
	vec3(1, 1, 0), vec3(1, -1, 0), vec3(-1, -1, 0), vec3(-1, 1, 0),
	vec3(1, 0, 1), vec3(-1, 0, 1), vec3(1, 0, -1), vec3(-1, 0, -1),
	vec3(0, 1, 1), vec3(0, -1, 1), vec3(0, -1, -1), vec3(0, 1, -1)
);

float CalculatePointShadow(in LightSource light, in LightingGlobals globals)
{
	// Get vector between fragment position and light position
	vec3 fragToLight = globals.FragPos - light.Pos;
	// Get current linear depth as the length between the fragment and light position
	float currentDepth = length(fragToLight);
	float bias = 0.05;
	float shadow = 0.0;

	switch(globals.ShadowType)
	{
		case HARD_SHADOWS:
			// Use the light to fragment vector to sample from the depth map
			float closestDepth = texture(light.depthCube, fragToLight).r;
			// It is currently in linear range between [0,1]. Re-transform back to original value
			closestDepth *= light.far_plane;
			shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
		break;
		case PCF_SHADOWS:
			int samples = 20;
			float viewDistance = length(globals.ViewPos - globals.FragPos);
			float diskRadius = (1.0 + (viewDistance / light.far_plane)) / 25.0f;
			for (int i = 0; i < samples; ++i)
			{
				float closestDepth = texture(light.depthCube, fragToLight + gridSamplingDisk[i] * diskRadius).r;
				closestDepth *= light.far_plane;   // Undo mapping [0;1]

				float distance = length(light.Pos - globals.FragPos);
				float distanceBias = max(bias, bias * distance / 5.0f);
				if (currentDepth - distanceBias > closestDepth)
					shadow += 1.0;
			}
			shadow /= float(samples);
		break;
		case VSM_SHADOWS:

		break;
	}

	// return shadow;
	return shadow;
}

LightComponents CalculateLight(in LightSource light, in LightingGlobals globals, in vec3 lightDir)
{
	LightComponents lighting;

	// Ambient
	float ambientStrength = 0.1f;
	lighting.Ambient = ambientStrength;

	// Diffuse
	float diffuseStrength = 1.0f;
	vec3 norm = normalize(globals.FragNormal);
	float diff = max(dot(norm, lightDir), 0.0);
	lighting.Diffuse = diffuseStrength * diff;

	// Specular
	float specularStrength = 0.1f;
	vec3 viewDir = normalize(globals.ViewPos - globals.FragPos);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(norm, halfwayDir), 0.0), 64.0);
	lighting.Specular = specularStrength * spec;

	return lighting;
}

float CalculateDirShadow(in LightSource light, in LightingGlobals globals, in float baseBias)
{
	vec4 fragPosLightSpace = light.lightSpaceMatrix * vec4(globals.FragPos, 1.0f);

	// perform perspective divide
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	// Transform to [0,1] range
	projCoords = projCoords * 0.5 + 0.5;

	// Keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
	if (projCoords.z > 1.0)
		return 0.0;

	// Get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
	float closestDepth = texture(light.depthMap, projCoords.xy).r;

	// Get depth of current fragment from light's perspective
	float currentDepth = projCoords.z;
	// Calculate bias (based on depth map resolution and slope)
	vec3 lightDir = normalize(light.Pos);

	float bias = max(baseBias / 10 * (1.0 - dot(globals.FragNormal, lightDir)), baseBias);

	float shadow = 0.0;
	// Check whether current frag pos is in shadow
	switch(globals.ShadowType)
	{
		case HARD_SHADOWS:
			shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
		break;
		case PCF_SHADOWS:
			vec2 texelSize = 1.0 / textureSize(light.depthMap, 0);
			for (int x = -1; x <= 1; ++x)
			{
				for (int y = -1; y <= 1; ++y)
				{
					float pcfDepth = texture(light.depthMap, projCoords.xy + vec2(x, y) * texelSize).r;
					shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
				}
			}
			shadow /= 9.0;
		break;
		case VSM_SHADOWS:

		break;
	}

	return shadow;
}

float CalculateCircularShadow(in LightSource light, in LightingGlobals globals)
{
	vec4 fragPosLightSpace = light.lightSpaceMatrix * vec4(globals.FragPos, 1.0f);

	// perform perspective divide
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

	//Generate Circular Shadow
	float distanceToCenter = length(projCoords.xy);
	return clamp(distanceToCenter * distanceToCenter, 0, 1);
}

float CalculateDistanceShadow(in LightSource light, in LightingGlobals globals)
{
	float distance = length(light.Pos - globals.FragPos);
	return distance / light.far_plane;
}

vec3 CalculateDirLightSource(in LightSource light, in LightingGlobals globals)
{
	LightComponents components = CalculateLight(light, globals, normalize(light.Pos));
	float shadow = 0;
	if (light.CastShadow)
		shadow = CalculateDirShadow(light, globals, 0.005);
	return (components.Ambient + (1.0 - shadow) * (components.Diffuse + components.Specular)) * light.Color;
}

vec3 CalculateSpotLightSource(in LightSource light, in LightingGlobals globals)
{
	LightComponents components = CalculateLight(light, globals, normalize(light.Pos - globals.FragPos));
	float shadow = 0;
	if (light.CastShadow)
	{
		shadow = CalculateDirShadow(light, globals, 0.002);
		float circular = CalculateCircularShadow(light, globals);
		shadow = clamp(shadow + circular, 0, 1);
	}
	return (components.Ambient + (1.0 - shadow) * (components.Diffuse + components.Specular)) * light.Color;
}

vec3 CalculatePointLightSource(in LightSource light, in LightingGlobals globals)
{
	LightComponents components = CalculateLight(light, globals, normalize(light.Pos - globals.FragPos));
	float shadow = 0;
	if (light.CastShadow)
	{
		shadow = CalculatePointShadow(light, globals);
		float distance = CalculateDistanceShadow(light, globals);
		shadow = clamp(shadow + distance, 0, 1);
	}
	return (components.Ambient + (1.0 - shadow) * (components.Diffuse + components.Specular)) * light.Color;
}
